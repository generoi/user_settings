<?php

/**
 * @todo Clean up code.
 * @todo Fix permissions.
 * @todo Form validation.
 */

/**
 *  Ipmlements hook_permission().
 */
function user_settings_permission() {
  return array(
    'user settings' => array(
      'title' => t('Edit user settings'),
    ),
  );
}

/**
 * Access callback for user account editing.
 */
function user_settings_edit_access($account) {
  return (($GLOBALS['user']->uid == $account->uid) || user_access('user settings')) && $account->uid > 0;
}

/**
 *  Implements hook_menu().
 */
function user_settings_menu() {
  $items = array();

  $items['user/%user/settings'] = array(
    'title' => 'User settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_settings_form', 1),
    'access callback' => 'user_settings_edit_access',
    'access arguments' => array(1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'user_settings.pages.inc',
  );

  return $items;
}

/**
 *  Implements hook_admin_paths().
 */
function user_settings_admin_paths() {
  $paths = array(
    'user/*/settings' => TRUE,
  );

  return $paths;
}

/**
 *  Form submit actions.
 */
function user_settings_form_submit($form, &$form_state) {
  $account = $form['#account'];

  $settings = (object) array_merge(
    (array) $form_state['values']['font'],
    (array) $form_state['values']['color']
  );
  $settings->uid = $account->uid;

  // Database handler.
  user_settings_save($settings);
  drupal_set_message(t('Settings saved.'));
}

/**
 *  Save user settings.
 */
function user_settings_save($user_settings) {

  // Check if user has values stored in database.
  $query = db_select('user_settings', 'u')
    ->fields('u')
    ->fields('n', array('uid', 'name'))
    ->condition('u.uid', $user_settings->uid);

  $query->join('users', 'n', 'u.uid=n.uid');
  $result = $query->execute();

  $data = '';
  $data .=
  'html {
    color: ' . $user_settings->color_text . ';
    font-family: ' . $user_settings->font_family . ';
    font-size: ' . $user_settings->font_size / 16 . 'em;
  }
  html body {
    background: ' . $user_settings->background . ';
  }
  h1, h2, h3, h4, h5, h6 {
    color: ' . $user_settings->color_heading . ';
    font-family: ' . $user_settings->heading_font_family . ';
  }
  #page {
    background: ' . $user_settings->content_background . ';
  }
  div.pane-bloggers-sidebar {
    background: ' . $user_settings->sidebar_background . ';
    color: ' . $user_settings->sidebar_text_color . ';
  }
  div.pane-bloggers-sidebar a {
    color: ' . $user_settings->link_color . ';
  }
  div.pane-bloggers-sidebar a:hover {
    color: ' . $user_settings->link_hover_color . ';
  }
  div.field-name-body {
    color: ' . $user_settings->color_text . ';
    font-family: ' . $user_settings->font_family . ';
    font-size: ' . $user_settings->font_size / 16 . 'em;
  }
  a {
    color: ' . $user_settings->link_color . ';
  }
  a:hover {
    color: ' . $user_settings->link_hover_color . ';
  }';

  $record = $result->fetchAssoc();

  $user_name = strtolower($record['name']);
  $dir = 'public://user_settings_styles';
  $new_dir = file_prepare_directory($dir, FILE_CREATE_DIRECTORY);
  $dest = 'public://user_settings_styles/' . $user_name . $user_settings->uid . '.css';
  $file = file_save_data($data, $dest, FILE_EXISTS_REPLACE);

  if ($result->rowCount() == 0) {

    $insert = db_insert('user_settings')
      ->fields(array(
        'uid' => $user_settings->uid,
        'fid' => $file->fid,
        'settings' => drupal_json_encode($user_settings),
      ))
      ->execute();

  } else {

    $update = db_update('user_settings')
      ->fields(array(
        'fid' => $file->fid,
        'settings' => drupal_json_encode($user_settings),
      ))
      ->condition('uid', $user_settings->uid)
      ->execute();

  }
}

/**
 * Reset user settings.
 */
function user_settings_form_reset($form, &$form_state) {
  $account = $form['#account'];

  $query = db_select('user_settings', 'u')
    ->fields('u', array('fid'))
    ->condition('u.uid', $account->uid, '=');

  $result = $query->execute()->fetchAssoc();

  $file = file_load($result['fid']);
  if (file_delete($file)) {
    drupal_set_message(t('Settings restored.'));
  };
}

/**
 *  Implements template_preprocess_html().
 */
function user_settings_preprocess_html(&$variables) {
  /**
   *  Check if current entity type is node or user,
   *  and if second argument is numeric.
   */
  $entity_type = array('node', 'user');
  if (in_array(arg(0), $entity_type) && is_numeric(arg(1))) {

    // Get UID for current entity.
    $entity = entity_load(arg(0), array('nid' => arg(1)));
    $uid = $entity[arg(1)]->uid;

    /**
     *  @see apply_user_settings().
     */
    apply_user_settings($uid);

  /**
   *  Check for second argument if page is not a node.
   */
  } elseif (!node_is_page(arg(1)) && is_numeric(arg(1))) {

    /**
     *  @see apply_user_settings().
     */
    apply_user_settings(arg(1));

  }
}

/**
 *  Apply user settings.
 */
function apply_user_settings($uid) {
  /**
   *  @see get_db_values().
   */
  $select = get_db_values($uid);
  $settings = drupal_json_decode($select['settings']);
  $fonts_array = get_fonts('url');

  /* @font-face import url. */
  $import_url = '';
  if (isset($settings['heading_font_family'])) {
    $import_url .= '@import url(' . $fonts_array[$settings['heading_font_family']] . ');' . PHP_EOL;
  }
  if (isset($settings['font_family'])) {
    $import_url .= '@import url(' . $fonts_array[$settings['font_family']] . ');' . PHP_EOL;
  }

  $user_name = strtolower($select['name']);
  drupal_add_css($import_url, array('type' => 'inline', 'preprocess' => FALSE));
  drupal_add_css('public://user_settings_styles/' . $user_name . $select['uid'] . '.css');
}

/**
 *  Get values stored in the database.
 */
function get_db_values($uid) {
  $result = '';

  $query = db_select('user_settings', 'u')
    ->fields('u', array('uid', 'fid', 'settings'))
    ->fields('n', array('name'))
    ->condition('u.uid', $uid, '=');

  $query->join('users', 'n', 'u.uid=n.uid');
  $result = $query->execute()->fetchAssoc();

  return $result;
}

/**
 *  Get list of fonts from JSON file.
 *  Build array with font names and corresponding urls.
 */
function get_fonts($pair) {
  $fonts_array = array();

  $path = drupal_get_path('module', 'user_settings');
  $font_file = file_get_contents($path . '/fonts/fonts.json');
  $fonts = drupal_json_decode($font_file);

  if ($pair == 'url') {
    foreach ($fonts['fonts'] as $key => $font) {
      $font_family = $font['family'];
      $font_url = $font['url'];
      $fonts_array[$font_family] = $font_url;
    }
  }
  if ($pair == 'family') {
    foreach ($fonts['fonts'] as $key => $font) {
      $font_family = $font['family'];
      $fonts_array[$font_family] = $font_family;
    }
  }

  return $fonts_array;
}
