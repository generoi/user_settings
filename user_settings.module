<?php

define('USER_SETTINGS_EXCLUDE_PATHS', 'admin/*');

/**
 * Implements hook_ctools_plugin_api().
 */
function user_settings_ctools_plugin_api($owner, $api) {
  if ($owner == 'user_settings' && $api == 'user_settings') {
    return array('version' => 1);
  }
}

/**
 * Implements hook_hook_info().
 */
function user_settings_hook_info() {
  $hooks = array(
    'user_settings_widget_info',
    'user_settings_widget_admin_form',
    // user_settings_widget_WIDGET
    'user_settings_stylesheet_rule_alter',
  );
  return array_fill_keys($hooks, array('group' => 'user_settings'));
}

/**
 *  Implements hook_permission().
 */
function user_settings_permission() {
  return array(
    'edit user settings' => array(
      'title' => t('Edit user settings'),
    ),
    'administer user settings' => array(
      'title' => t('Administer user settings'),
    ),
  );
}
/**
 * Implements hook_menu().
 */
function user_settings_menu() {
  $items['user/%user/settings'] = array(
    'title' => 'User settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_settings_form', 1),
    'access callback' => 'user_settings_access',
    'access arguments' => array('edit', 1),
    'type' => MENU_LOCAL_TASK,
    'file' => 'user_settings.pages.inc',
  );

  // Page with exportable objects list.
  $items['admin/structure/user-settings'] = array(
    'title' => 'User Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_settings_property_list_form'),
    'access callback' => 'user_settings_access',
    'access arguments' => array('administer'),
    'file' => 'user_settings.admin.inc',
  );

  $items['admin/structure/user-settings/list'] = array(
    'title' => 'User Settings properties',
    'file' => 'user_settings.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 0,
  );

  // Create new exportable object.
  $items['admin/structure/user-settings/create'] = array(
    'title' => 'Create user settings property',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_settings_property_edit_form'),
    'access callback' => 'user_settings_access',
    'access arguments' => array('administer'),
    'file' => 'user_settings.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // Import exportable object.
  $items['admin/structure/user-settings/import'] = array(
    'title' => 'Import user settings property',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_settings_property_import_form'),
    'access callback' => 'user_settings_access',
    'access arguments' => array('administer'),
    'file' => 'user_settings.admin.inc',
    'type' => MENU_LOCAL_ACTION,
  );

  // Export exportable object.
  $items['admin/structure/user-settings/%user_settings_property/export'] = array(
    'title' => 'Export user settings property',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_settings_property_export_form', 3),
    'access callback' => 'user_settings_access',
    'access arguments' => array('administer'),
    'file' => 'user_settings.admin.inc',
  );

  // Edit exportable object.
  $items['admin/structure/user-settings/%user_settings_property/edit'] = array(
    'title' => 'Edit user settings property',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_settings_property_edit_form', 3),
    'access callback' => 'user_settings_access',
    'access arguments' => array('administer'),
    'file' => 'user_settings.admin.inc',
  );

  // Delete exportable object.
  $items['admin/structure/user-settings/%user_settings_property/delete'] = array(
    'title' => 'Delete user settings property',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('user_settings_property_delete_form', 3),
    'access callback' => 'user_settings_access',
    'access arguments' => array('administer'),
    'file' => 'user_settings.admin.inc',
  );

  // Disable exportable object.
  $items['admin/structure/user-settings/%user_settings_property/disable'] = array(
    'title' => 'Disable user settings property',
    'page callback' => 'user_settings_property_disable_page',
    'page arguments' => array(3),
    'access callback' => 'user_settings_access',
    'access arguments' => array('administer'),
    'file' => 'user_settings.admin.inc',
  );

  // Enable exportable object.
  $items['admin/structure/user-settings/%user_settings_property/enable'] = array(
    'title' => 'Enable user settings property',
    'page callback' => 'user_settings_property_enable_page',
    'page arguments' => array(3),
    'access callback' => 'user_settings_access',
    'access arguments' => array('administer'),
    'file' => 'user_settings.admin.inc',
  );

  return $items;
}

/**
 * Implementats hook_theme().
 */
function user_settings_theme() {
  return array(
    'user_settings_property_list_form' => array(
      'render element' => 'form',
      'file' => 'user_settings.theme.inc',
    ),
  );
}

/**
 * Save exportable object.
 *
 * @param $exportable_object
 *   Object that should be saved or updated.
 * @return int
 *   Saving result.
 */
function user_settings_property_save($property) {
  ctools_include('export');
  $save_result = ctools_export_crud_save('user_settings_properties', $property);
  return $save_result;
}

/**
 * Delete exportable object from database by object machine name.
 *
 * @param $name
 *   Object machine name.
 */
function user_settings_property_delete($name) {
  $property = user_settings_property_load($name);
  ctools_export_crud_delete('user_settings_properties', $property);
}

/**
 * Load exportable object from database by object machine name.
 *
 * @param $name
 *   Object machine name.
 * @return object|bool
 *   Loaded object or FALSE if object was not loaded.
 */
function user_settings_property_load($name) {
  ctools_include('export');
  $result = ctools_export_load_object('user_settings_properties', 'names', array($name));

  if (!empty($result[$name])) {
    $property = user_settings_property_load_prepare($result[$name]);
  }

  return !empty($property) ? $property : FALSE;
}

/**
 * Load multiple exportable objects by array with machine names.
 *
 * @param $names
 *   Array with objects machine names.
 * @return array
 *   Loaded exportable objects.
 */
function user_settings_property_load_multiple($names) {
  ctools_include('export');
  $result = ctools_export_load_object('user_settings_properties', 'names', $names);
  $result = array_map('user_settings_property_load_prepare', $result);
  return $result;
}

/**
 * Load all exportable objects from database.
 *
 * @return array
 *   Loaded exportable objects.
 */
function user_settings_property_load_all() {
  ctools_include('export');
  $result = ctools_export_load_object('user_settings_properties', 'all');
  $result = array_map('user_settings_property_load_prepare', $result);
  return $result;
}

/**
 * Prepare exportable object for correct processing.
 *
 * @param $property
 *   Exportable object loaded from database.
 * @return object
 *   Prepared exportable object.
 */
function user_settings_property_load_prepare($property) {
  $property->disabled = isset($property->disabled) ? $property->disabled : FALSE;
  $property->is_overwritten = ($property->export_type == (EXPORT_IN_DATABASE | EXPORT_IN_CODE));
  return $property;
}

/**
 * Return code that presents exportable object.
 *
 * @param $property
 *   Exportable object loaded from database.
 * @param $indent
 *   Variable shows how much code lines should be intended for hierarchical structure.
 * @return string
 *   Exportable code.
 */
function user_settings_export($property, $indent) {
  return ctools_export_object('user_settings_properties', $property, $indent);
}

/**
 * Provide list of exportable objects for exportable interface.
 * Example: Features of CTools bulk export.
 *
 * @return array
 *   Array with available exportable objects.
 */
function user_settings_property_export_list() {
  $result = user_settings_property_load_all();

  $list = array();
  foreach ($result as $property) {
    $placeholders =  array('@name' => $property->name, '@machine_name' => $property->machine_name);
    $list[$property->machine_name] =  format_string('@name (@machine_name)', $placeholders);
  }

  return $list;
}

/**
 * Access callback for user account editing.
 */
function user_settings_access($op, $account = NULL) {
  if (user_access('administer user settings')) {
    return TRUE;
  }
  switch ($op) {
    case 'edit';
      return (is_object($account) && $GLOBALS['user']->uid == $account->uid) || user_access("$op user settings");
  }
  return FALSE;
}


/**
 *  Implements hook_admin_paths().
 */
function user_settings_admin_paths() {
  $paths = array(
    'user/*/settings' => TRUE,
  );

  return $paths;
}

/**
 * Implements hook_init().
 */
function user_settings_init() {
  // Include the custom stylesheet if path isnt admin and not in the exclude
  // path.
  if (!path_is_admin(current_path()) && ($stylesheet = variable_get('user_settings_stylesheet'))) {
    $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
    $page_match = drupal_match_path($path, variable_get('user_settings_exclude_paths', USER_SETTINGS_EXCLUDE_PATHS));
    if ($path != $_GET['q']) {
      $path = drupal_strtolower(drupal_get_path_alias($_GET['q']));
      $page_match = $page_match || drupal_match_path($path, variable_get('user_settings_exclude_paths', USER_SETTINGS_EXCLUDE_PATHS));
    }
    if (!$page_match) {
      drupal_add_css($stylesheet, array('group' => CSS_THEME, 'weight' => 1000));
    }
  }
  // Add a button to the Panels IPE toolbar.
  if (module_exists('multisite') && module_exists('panels_ipe') && !path_is_admin(current_path())) {
    $multisite = multisite_load_current();
    $user = user_load($multisite->uid);
    if (user_settings_access('edit', $user)) {
      $button = array(
        '#type' => 'link',
        '#title' => 'Site settings',
        '#href' => "user/$user->uid/settings",
        '#id' => 'panels-ipe-user-settings',
        '#attributes' => array(
          'class' => array('panels-ipe-pseudobutton'),
        ),
        '#options' => array(
          'query' => array('destination' => current_path()),
        ),
        '#prefix' => '<div class="panels-ipe-pseudobutton-container">',
        '#suffix' => '</div>',
      );
      panels_ipe_toolbar_add_button('user-settings', 'panels-ipe-user-settings', $button);
    }
  }
}

/**
 * Load a widget definition or all widgets.
 */
function user_settings_get_widgets($widget = NULL) {
  $widgets = &drupal_static(__FUNCTION__);
  if (!isset($widgets)) {
    $widgets = module_invoke_all('user_settings_widget_info');
  }
  return isset($widget) ? $widgets[$widget] : $widgets;
}

/**
 * Write a stylesheet file to the filesystem based on a settings file.
 */
function user_settings_build_stylesheet($settings) {
  $properties = user_settings_property_load_all();
  $rules = array();
  foreach ($properties as $machine_name => $property) {
    $widget = user_settings_get_widgets($property->data['type']);
    if (!empty($widget['skip stylesheet'])) {
      continue;
    }
    $value = $settings['properties'][$machine_name];
    $rule = new stdClass();
    $rule->selector = $property->data['selector'];
    $rule->property = $property->data['property'];
    $rule->value = $value;

    $context = array(
      'machine_name' => $machine_name,
      'property' => $property,
      'widget' => $property->data['type'],
      'rules' => &$rules,
    );

    // Let other modules alter the rules.
    drupal_alter('user_settings_stylesheet_rule', $rule, $context);
    if ($rule->value) {
      $rules[] = "$rule->selector { $rule->property: $rule->value; }";
    }
  }
  $dir = 'public://user_settings_styles';
  $content = implode('', $rules);
  if (file_prepare_directory($dir, FILE_CREATE_DIRECTORY)) {
    $destination = $dir . '/stylesheet.css';
    $file = file_save_data($content, $destination, FILE_EXISTS_REPLACE);
    return $file;
  }
  return FALSE;
}

/**
 * Save a settings array for the current site and generate the stylesheet.
 */
function user_settings_save($settings) {
  variable_set('user_settings', $settings);
  if ($file = user_settings_build_stylesheet($settings)) {
    variable_set('user_settings_stylesheet', $file->uri);
    // Change query-strings on css/js files to enforce reload for all users.
    _drupal_flush_css_js();
  }
}

/**
 * Load a settings array for the current site.
 */
function user_settings_load() {
  if (!($settings = variable_get('user_settings', FALSE))) {
    $properties = user_settings_property_load_all();
    $settings = array('properties' => array());
    foreach ($properties as $machine_name => $property) {
      $settings['properties'][$machine_name] = $property->data['default'];
    }
  }
  return $settings;
}

/**
 * Reset user settings and delete the stylesheets file.
 */
function user_settings_delete() {
  variable_del('user_settings');

  if ($file_uri = variable_get('user_settings_stylesheet')) {
    $file = file_load_multiple(array(), array('uri' => $file_uri));
    if ($file = reset($file)) {
      file_delete($file, TRUE);
      variable_del('user_settings_stylesheet');
    }
  }
}

/**
 * Submit callback for upload widgets.
 */
function user_settings_widget_upload_submit($form, $form_state) {
  module_load_include('inc', 'user_settings', 'user_settings.user_settings');
  _user_settings_widget_upload_submit($form, $form_state);
}
